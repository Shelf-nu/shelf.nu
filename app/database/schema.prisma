datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "fullTextSearch"]
}

model Image {
  id String @id @default(cuid())

  contentType String
  altText     String?
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  location     Location?
  organization Organization? @relation("orgImage")

  ownerOrg   Organization @relation("owner", fields: [ownerOrgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerOrgId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model User {
  id             String  @id @default(cuid())
  email          String  @unique
  username       String  @unique @default(cuid())
  firstName      String?
  lastName       String?
  profilePicture String?
  usedFreeTrial  Boolean @default(false)
  onboarded      Boolean @default(false)
  customerId     String? @unique // Stripe customer id
  tierId         TierId  @default(free)
  tier           Tier    @relation(fields: [tierId], references: [id])
  sso            Boolean @default(false)

  // Datetime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  assets            Asset[]
  categories        Category[]
  notes             Note[]
  qrCodes           Qr[]
  scans             Scan[]
  tags              Tag[]
  roles             Role[]
  locations         Location[]
  images            Image[]
  organizations     Organization[]
  customFields      CustomField[]
  sentInvites       Invite[]           @relation("inviter")
  receivedInvites   Invite[]           @relation("invitee")
  teamMembers       TeamMember[]
  userOrganizations UserOrganization[]
  bookings          Booking[]          @relation("creator")
  custodies         Booking[]          @relation("custodian")
  createdKits       Kit[]

  @@unique([email, username])
}

model Asset {
  id                  String      @id @default(cuid())
  title               String
  description         String?
  mainImage           String?
  mainImageExpiration DateTime?
  status              AssetStatus @default(AVAILABLE)
  valuation           Float?      @map("value") // Field to store the monetary value of an asset
  availableToBook     Boolean     @default(true)

  // Datetime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade)
  organizationId String
  category       Category?    @relation(fields: [categoryId], references: [id])
  categoryId     String?
  location       Location?    @relation(fields: [locationId], references: [id])
  locationId     String?
  kit            Kit?         @relation(fields: [kitId], references: [id])
  kitId          String?

  custody         Custody?
  notes           Note[]
  qrCodes         Qr[]
  reports         ReportFound[]
  tags            Tag[]
  customFields    AssetCustomFieldValue[]
  assetSearchView AssetSearchView?
  bookings        Booking[]

  //@@unique([title, organizationId]) //prisma doesnt support case insensitive unique index yet
}

view AssetSearchView {
  id           String @id @default(cuid())
  searchVector String

  // Relationships
  asset   Asset  @relation(fields: [assetId], references: [id])
  assetId String @unique

  // Datetime
  createdAt DateTime @default(now())
}

enum AssetStatus {
  AVAILABLE
  IN_CUSTODY
  CHECKED_OUT
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String?
  color       String

  // DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  assets Asset[]
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  customFields CustomField[]

  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade)
  organizationId String

  //@@unique([lower(name), organizationId]) //prisma doesnt support case insensitive unique index yet
}

model Tag {
  id          String  @id @default(cuid())
  name        String
  description String?

  //relations
  assets Asset[]
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade)
  organizationId String

  // Datetime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //@@unique([lower(name), organizationId]) //prisma doesnt support case insensitive unique index yet
}

model Note {
  id      String   @id @default(cuid())
  content String
  type    NoteType @default(COMMENT)

  // Datetime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String
  asset   Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assetId String
}

enum NoteType {
  COMMENT
  UPDATE
}

model Qr {
  id String @id @default(cuid())

  // Version of the QR code based on spec from Denso wave
  version Int @default(0)

  // Error correction level based on spec from Denso wave
  errorCorrection ErrorCorrection @default(L)

  // Relationships
  asset   Asset?  @relation(fields: [assetId], references: [id], onDelete: SetNull)
  assetId String?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?

  organization   Organization? @relation(fields: [organizationId], references: [id], onUpdate: Cascade)
  organizationId String?

  // This batch is used to group QR codes together when they are created as unclaimed and printed
  batch   PrintBatch? @relation(fields: [batchId], references: [id], onDelete: SetNull)
  batchId String?

  // DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  scans     Scan[]
}

model PrintBatch {
  id String @id @default(cuid())

  name String @unique

  // This should be set to true, when QR code is exported for print
  printed Boolean @default(false)

  // Relationships
  qrCodes Qr[]

  // DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Stores a report for when a an asset is reported as found
model ReportFound {
  id      String @id @default(cuid())
  email   String
  content String

  // Datetime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  asset   Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assetId String
}

enum ErrorCorrection {
  L
  M
  Q
  H
}

model Scan {
  id String @id @default(cuid())

  latitude  String?
  longitude String?

  userAgent String?

  // When a logged in user scanned the QR code, we store it here
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  qr   Qr?     @relation(fields: [qrId], references: [id], onDelete: SetNull)
  qrId String?

  // We also store the qrId as a raw string for reference is fhte qr is deleted
  rawQrId String

  // This will be true if the user manually created the scan by using "Update GPS coordinates"
  manuallyGenerated Boolean @default(false)

  // DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id          String  @id @default(cuid())
  name        String
  description String?
  address     String?

  image   Image?  @relation(fields: [imageId], references: [id])
  imageId String? @unique

  // Datetime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade)
  organizationId String

  assets Asset[]

  // @@unique([lower(name), organizationId]) //prisma doesnt support case insensitive unique index yet
}

// Master data for roles
model Role {
  id   String @id @unique @default(cuid())
  name Roles  @unique @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]
}

enum Roles {
  USER
  ADMIN
}

model TeamMember {
  id   String @id @unique @default(cuid())
  name String

  organization    Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade)
  organizationId  String
  custodies       Custody[]
  receivedInvites Invite[]
  user            User?        @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId          String?
  kitCustodies    KitCustody[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  bookings  Booking[]
}

model Custody {
  id String @id @default(cuid())

  custodian    TeamMember @relation(fields: [teamMemberId], references: [id])
  teamMemberId String

  asset   Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assetId String @unique

  // DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id   String           @id @unique @default(cuid())
  name String           @default("Personal")
  type OrganizationType @default(PERSONAL)

  owner    User     @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId   String
  currency Currency @default(USD)

  members TeamMember[]
  assets  Asset[]

  image   Image?  @relation("orgImage", fields: [imageId], references: [id])
  imageId String? @unique

  // Not required. It will only be created for orgs that need sso
  // We can know if an org has SSO by checking the ssoDetailsId
  enabledSso Boolean @default(false) // If true, the organization has enabled SSO. This cannot be changed by the user, just managed by the admin
  ssoDetailsId String?
  ssoDetails   SsoDetails? @relation(fields: [ssoDetailsId], references: [id])

  locations         Location[]
  categories        Category[]
  tags              Tag[]
  qrCodes           Qr[]
  invites           Invite[]
  userOrganizations UserOrganization[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  customFields CustomField[]
  images       Image[]       @relation("owner")
  bookings     Booking[]
  kits         Kit[]
}

model UserOrganization {
  id String @id @unique @default(cuid())

  user           User         @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade)
  organizationId String

  roles     OrganizationRoles[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([userId, organizationId])
}

enum OrganizationType {
  PERSONAL
  TEAM
}

enum OrganizationRoles {
  ADMIN
  TEAM_MEMBER
  OWNER
  SELF_SERVICE
}

model SsoDetails {
  id String @id @default(cuid())
  
  // The domain of the organization
  domain String

  organizations Organization[]

  selfServiceGroupId String? // The group id for self service users
  adminGroupId       String? // The group id for admin users

  // Datetime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// Tier Ids are used to identify tiers (products) in Stripe. They must be predictable in our model.
// Each product in stripe has a metadata value called `shelf_tier` which holds the value of the enum
// Add more tiers if needed
enum TierId {
  free
  tier_1
  tier_2
}

// Tiers correspond to Stripe products
model Tier {
  id          TierId     @id // Used to create Stripe product ID
  name        String // Name coming from Stripe product
  subscribers User[]
  tierLimitId TierId?    @unique
  tierLimit   TierLimit? @relation(fields: [tierLimitId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model TierLimit {
  id               TierId   @id
  tier             Tier?
  canImportAssets  Boolean  @default(false)
  canExportAssets  Boolean  @default(false)
  maxCustomFields  Int      @default(0)
  maxOrganizations Int      @default(1)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model CustomField {
  id       String  @id @unique @default(cuid())
  name     String
  helpText String?
  required Boolean @default(false)
  active   Boolean @default(true)

  type    CustomFieldType @default(TEXT)
  options String[]

  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade)
  organizationId String

  createdBy User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String

  categories Category[]

  // Datetime
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  assetCustomFieldsValues AssetCustomFieldValue[]

  //@@unique([lower(name), organizationId]) //prisma doesnt support case insensitive unique index yet
}

enum CustomFieldType {
  TEXT
  OPTION
  BOOLEAN
  DATE
  MULTILINE_TEXT
}

model AssetCustomFieldValue {
  id String @id @default(cuid())

  // value String
  value Json //{raw: "actual data",valueText:"text type",valueBoolean:"boolean type" and so on... }

  // Relationships
  asset   Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assetId String

  customField   CustomField @relation(fields: [customFieldId], references: [id], onUpdate: Cascade)
  customFieldId String

  // Datetime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Currency {
  USD // United States Dollar
  EUR // Euro
  GBP // British Pound Sterling
  JPY // Japanese Yen
  AUD // Australian Dollar
  CAD // Canadian Dollar
  CHF // Swiss Franc
  CNY // Chinese Yuan
  DKK // Danish Krone
  INR // Indian Rupee
  ZAR // South African Rand
  BRL // Brazilian Real
  MXN // Mexican Peso
  SGD // Singapore Dollar
  NZD // New Zealand Dollar
  SEK // Swedish Krona
  NOK // Norwegian Krone
  KRW // South Korean Won
  RUB // Russian Ruble
  HKD // Hong Kong Dollar
  SAR // Saudi Riyal
  AED // United Arab Emirates Dirham
}

enum InviteStatuses {
  PENDING
  ACCEPTED
  REJECTED
  INVALIDATED
}

model Invite {
  id String @id @default(cuid())

  //relations
  inviter           User         @relation("inviter", fields: [inviterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inviterId         String
  organization      Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade)
  organizationId    String
  inviteeUser       User?        @relation("invitee", fields: [inviteeUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inviteeUserId     String?
  inviteeTeamMember TeamMember   @relation(fields: [teamMemberId], references: [id])
  teamMemberId      String

  inviteeEmail String
  status       InviteStatuses      @default(PENDING)
  inviteCode   String
  roles        OrganizationRoles[]

  // Datetime
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id String @id @default(cuid())

  name    String
  content String

  link      String?
  linkText  String?
  published Boolean @default(false)

  // Datetime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookingStatus {
  DRAFT
  RESERVED
  ONGOING
  OVERDUE
  COMPLETE
  ARCHIVED
  CANCELLED
}

model Booking {
  id String @id @default(cuid())

  name   String
  status BookingStatus @default(DRAFT)

  activeSchedulerReference String?

  // Relationships
  creator   User   @relation("creator", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  creatorId String

  custodianUser   User?   @relation("custodian", fields: [custodianUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  custodianUserId String?

  custodianTeamMember   TeamMember? @relation(fields: [custodianTeamMemberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  custodianTeamMemberId String?

  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade)
  organizationId String

  assets Asset[]

  // Datetime
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @db.Timestamptz(3)
  from      DateTime? @db.Timestamptz(3)
  to        DateTime? @db.Timestamptz(3)
}

model Kit {
  id String @id @default(cuid())

  name        String
  description String?
  status      KitStatus @default(AVAILABLE)

  image           String?
  imageExpiration DateTime?

  assets  Asset[]
  custody KitCustody?

  organization   Organization @relation(fields: [organizationId], references: [id], onUpdate: Cascade)
  organizationId String

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum KitStatus {
  AVAILABLE
  IN_CUSTODY
  CHECKED_OUT
}

model KitCustody {
  id String @id @default(cuid())

  custodian   TeamMember @relation(fields: [custodianId], references: [id])
  custodianId String

  kit   Kit    @relation(fields: [kitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  kitId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
